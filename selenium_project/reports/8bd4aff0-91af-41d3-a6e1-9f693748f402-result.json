{"name": "test_register[data1]", "status": "failed", "statusDetails": {"message": "AssertionError: assert '邮箱不能为空' == '邮箱不能为空！'\n  - 邮箱不能为空！\n  ?       -\n  + 邮箱不能为空", "trace": "self = <selenium_project.testcases.test_01_register.TestCase object at 0x000002A28446F310>\ndata = <selenium_project.data.test_data.TestData object at 0x000002A2843B4D30>\n\n    @allure.story('测试注册')\n    @pytest.mark.parametrize('data', DataRead.data_read('register'))\n    def test_register(self, data):\n        # 如果数据标记为跳过，则使用pytest.skip跳过测试\n        if data.is_skip:\n            pytest.skip(\"Data is marked to be skipped\")\n    \n        # 打开注册页面\n        self.__driver.get(data.url)\n    \n        # 对数据进行处理\n        data = DataProcess.data_process(data, self.__driver)\n    \n        # 获取输入的用户名、密码、确认密码、邮箱和验证码\n        username_str = data.get_parameters_value('username')\n        pwd_str = data.get_parameters_value('pwd')\n        confirmPwd_str = data.get_parameters_value('confirmPwd')\n        email_str = data.get_parameters_value('email')\n        captcha_str = data.get_parameters_value('captcha_str')\n        expect = data.expect  # 预期结果\n    \n        # 输入用户名\n        username = self.__driver.find_element(By.NAME, value='username')\n        username.send_keys(username_str)\n    \n        # 输入邮箱\n        email = self.__driver.find_element(By.NAME, 'email')\n        email.send_keys(email_str)\n    \n        # 输入密码\n        password = self.__driver.find_element(By.NAME, value='pwd')\n        password.send_keys(pwd_str)\n    \n        # 输入确认密码\n        confirm_pwd = self.__driver.find_element(By.NAME, value='confirmPwd')\n        confirm_pwd.send_keys(confirmPwd_str)\n    \n        # 输入验证码\n        captcha_input_box = self.__driver.find_element(value='captcha')\n        captcha_input_box.send_keys(captcha_str)\n    \n        # 点击注册按钮\n        register_button = self.__driver.find_element(By.XPATH, '/html/body/div[1]/div/div/form/div[6]/div/button')\n        register_button.click()\n    \n        # 等待弹窗出现\n        WebDriverWait(self.__driver, 5).until(EC.alert_is_present())\n    \n        # 切换到弹窗，获取弹窗文本\n        alert = self.__driver.switch_to.alert\n        alert_text = alert.text\n        alert.accept()\n    \n        # 断言弹窗文本与预期结果一致\n>       assert alert_text == expect\nE       AssertionError: assert '邮箱不能为空' == '邮箱不能为空！'\nE         - 邮箱不能为空！\nE         ?       -\nE         + 邮箱不能为空\n\nselenium_project\\testcases\\test_01_register.py:79: AssertionError"}, "attachments": [{"name": "stdout", "source": "c7c52659-7a68-4978-bd2f-66d7a81412ab-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "<selenium_project.data.test_data.TestData object at 0x000002A2843B4D30>"}], "start": 1704704415380, "stop": 1704704416324, "uuid": "35f63177-e1c2-4597-bcf6-29ace202c9ae", "historyId": "d6fa1f79f056fa7da7248dde077e8a61", "testCaseId": "dd36775e400cd34d2cad5307489ad4b0", "fullName": "selenium_project.testcases.test_01_register.TestCase#test_register", "labels": [{"name": "story", "value": "测试注册"}, {"name": "parentSuite", "value": "selenium_project.testcases"}, {"name": "suite", "value": "test_01_register"}, {"name": "subSuite", "value": "TestCase"}, {"name": "host", "value": "PCT20037031"}, {"name": "thread", "value": "17492-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "selenium_project.testcases.test_01_register"}]}